{"./":{"url":"./","title":"Introduction","keywords":"","body":"Mercury_X1_docs "},"1-ProductIntroduction/":{"url":"1-ProductIntroduction/","title":"1 Product Introduction","keywords":"","body":""},"1-ProductIntroduction/1.1-DesignPhilosophy.html":{"url":"1-ProductIntroduction/1.1-DesignPhilosophy.html","title":"1.1 Design Philosophy","keywords":"","body":""},"1-ProductIntroduction/1.2-SuitableUsers.html":{"url":"1-ProductIntroduction/1.2-SuitableUsers.html","title":"1.2 Suitable Users","keywords":"","body":""},"1-ProductIntroduction/1.3-ApplicationScenario.html":{"url":"1-ProductIntroduction/1.3-ApplicationScenario.html","title":"1.3 Application Scenario","keywords":"","body":""},"1-ProductIntroduction/1.4-AccessoriesTools/1.4-AccessoriesTools.html":{"url":"1-ProductIntroduction/1.4-AccessoriesTools/1.4-AccessoriesTools.html","title":"1.4 Accessories Tools","keywords":"","body":""},"2-ProductFeature/":{"url":"2-ProductFeature/","title":"2 Product Feature","keywords":"","body":""},"2-ProductFeature/2.1-MachineSpecification.html":{"url":"2-ProductFeature/2.1-MachineSpecification.html","title":"2.1 Functional Parameters","keywords":"","body":""},"2-ProductFeature/2.2-ControlCoreParameter.html":{"url":"2-ProductFeature/2.2-ControlCoreParameter.html","title":"2.2 Controller Parameters","keywords":"","body":""},"2-ProductFeature/2.3-MechanicalStructureParameter.html":{"url":"2-ProductFeature/2.3-MechanicalStructureParameter.html","title":"2.3 Structural Parameters","keywords":"","body":""},"2-ProductFeature/2.4-ElectricalCharacteristicParameter.html":{"url":"2-ProductFeature/2.4-ElectricalCharacteristicParameter.html","title":"2.4 Electronic Parameters","keywords":"","body":""},"2-ProductFeature/2.5-CoordinateSystem.html":{"url":"2-ProductFeature/2.5-CoordinateSystem.html","title":"2.5 Coordinate System","keywords":"","body":""},"3-UserNotes/":{"url":"3-UserNotes/","title":"3 User Notes","keywords":"","body":""},"3-UserNotes/3.1-SafetyInstruction.html":{"url":"3-UserNotes/3.1-SafetyInstruction.html","title":"3.1 Safety Instructions","keywords":"","body":"Safety Instructions 1 Synopsis This chapter details general safety information for personnel performing installation, maintenance, and repair work on elephant robots. Read and understand the contents and precautions in this chapter before carrying, installing, and using it. 2 Hazard identification The safety of cooperative robots is based on the proper configuration and use of robots. Furthermore, injury or damage caused by the operator may occur even if all safety instructions are followed. Therefore, it is very important to understand the safety risks of robot use in order to prevent them. Table 1-1 to 3 lists the common security risks that may occur when robots are used∶ Table 1-1 Risk level Security risks 1 Personal injury or robot damage caused by improper handling of the robot. 2 If the robot is not fixed as required, for example, the screw is missing or the screw is not tight, or the locking capacity of the base is insufficient to support the robot to move at high speed, the robot will fall over, resulting in personal injury or robot damage. 3 The robot's safety function fails to play its role due to the incorrect configuration of safety functions or the lack of safety protection tools. Table 1-2 Warning security risks 1 When debugging the program, do not stay within the robot's motion range. Improper safety configuration may fail to avoid collisions, potentially causing personal injury. 2 The connection between robots and other equipment may introduce new hazards, necessitating a comprehensive risk assessment. 3 Be cautious of scratches and punctures caused by sharp surfaces, such as other equipment in the working environment or robot end effectors. 4 Robots are precision machines; stepping on them can cause damage. Improper placement during transportation may lead to vibration, affecting internal parts and causing damage. Therefore, ensure stability and mechanical structural integrity in all circumstances. 5 Failure to remove a clamped object before powering off the robot (when the clamping is not secure) may lead to dangers such as damage to the end effector or injuries if the clamped object falls due to power loss. 6 There is a risk of unexpected robot movement. Never stand under any axis of the robot under any circumstances! 7 Compared to ordinary mechanical equipment, robots have more degrees of freedom and a larger range of motion. Failure to stay within the range of motion may result in unexpected collisions. Table 1-3 Potential safety hazards that may lead to electric shock 1 Unknown hazards may arise when using non-original cables. 2 Electrical equipment contact with liquid may cause leakage hazard. 3 Electrical connection error may cause electric shock. 4 Be sure to switch off the power supply of the controller and related devices and remove the power plug before replacement. If the operation is carried out with power on, it may cause electric shock or failure. 3 Safety Precautions The following safety rules should be followed when using the manipulator: The mechanical arm belongs to live equipment. Non-professionals are not allowed to change the circuit at will, otherwise it may cause damage to the equipment or human body. When operating mechanical arms, comply with local laws and regulations. The safety precautions and dangers, Warnings, and precautions described in this manual are only supplements to the local safety regulations. Please use the mechanical arm within the specified environment. Exceeding the specifications and load conditions of the mechanical arm will shorten the service life of the product and even damage the equipment. The person installing, operating and maintaining the myCobot arm, anyway, has to be rigorously trained on safety precautions and the right way to operate and maintain the robot. Anyway, don't use the product in humid environments for long periods of time. This product is a precision electronic component, which will damage the equipment in damp environment for a long time. Anyway, don't use the product in humid environments for long periods of time. This product is a precision electronic component, which will damage the equipment in damp environment for a long time. Highly corrosive cleaning is not suitable for cleaning the mechanical arm, and anodized parts are not suitable for immersion cleaning. Unconsciously, do not use the device without installing a base to avoid damaging the device or accidents, instead use the device in a fixed environment without obstacles. Do not use other power adapters for power supply. If the equipment is damaged due to the use of non-standard adapters, the after-sales service will not be included. Do not disassemble, disassemble, or unscrew the screws or shell of the manipulator. If disassembled, no warranty service can be provided. Personnel without professional training are not allowed to repair the faulty products and dismantle the mechanical arm without permission. If the products fail, please contact myCobot technical support engineers in time. If the product is discarded, please comply with the relevant laws to properly dispose of industrial waste and protect the environment. A child uses a device at some point, forcing someone to monitor the process and switch it off when it's finished. When the robot is moving, do not extend your hand into the movement range of the robot arm, for fear of collision. It is strictly prohibited to change, remove or modify the nameplate, description, icon and mark of the manipulator and related equipment. Please be careful in handling and installation. Put the robot gently according to the instructions on the packing case and place it correctly in the direction of the arrow. Otherwise, the machine may be damaged. Do not burn other product drivers from Atom terminal, or burn firmware using unofficial recommendations. If the equipment is damaged due to the user burning other firmware, it will not be in the after-sales service. Power supply specifications: Use the official power supply USB Type-C usage specifications: Do not connect to power strips If you have any questions or suggestions about the contents of this manual, please log in the official website of Elephant Robot and submit relevant information： https://www.elephantrobotics.com Please do not use the mechanical arm for the following purposes： Cost of healthcare in life-critical applications. Buying a bus can cause an explosion in an environment. Lent is used directly without a risk assessment. Cost of using a security function at a low level. Lo-fi does not conform to the use of robot performance parameters. 4 Disclaimer Please read and understand the following disclaimer carefully before using the product: Safe Use: This product is designed for specific application scenarios. Ensure that all safety guidelines and operating manuals are followed during use. Users should be properly trained in the use of the product and understand and comply with all relevant safety regulations. LIMITATION OF LIABILITY: THE MANUFACTURER SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES RESULTING FROM THE USE OR MISUSE OF, OR ANY MATTER RELATING TO THE PRODUCTS. This disclaimer does not cover or exclude liability whose exclusion is not permitted by law. Technical Support: Please read the product documentation carefully during installation and use, and seek technical support from the manufacturer if necessary. For technical support issues, please refer to the official documentation provided by the manufacturer or contact the relevant support channel. Software Updates: The manufacturer may provide updates to product firmware or software. Users should regularly check and apply these updates to ensure product performance and security. Periodic Maintenance: Users should inspect and maintain the product following the regular maintenance guidelines provided by the manufacturer. Regular maintenance and inspections help ensure long-term product performance. Customization and Modifications: Products may not be customized, modified, or altered without the express permission of the manufacturer. Any unauthorized modifications may void the product's warranty and may have unpredictable effects on safety and performance. Legal Compliance: Users should ensure that their use complies with all applicable laws and regulations. In some areas, the use of the product may be restricted by specific regulations. By using the Mercury A1 seven-axis collaborative robot, you agree to and accept these disclaimers. The manufacturer reserves the right to change product specifications, features, and disclaimers without prior notice. ← Previous Section | Next Chapter → "},"3-UserNotes/3.2-TransportandStorage.html":{"url":"3-UserNotes/3.2-TransportandStorage.html","title":"3.2 Transport and Storage","keywords":"","body":" ← Previous Section | Next Chapter → "},"3-UserNotes/3.3-MaintenanceandCare.html":{"url":"3-UserNotes/3.3-MaintenanceandCare.html","title":"3.3 Maintenance and Care","keywords":"","body":" ← Previous Section | Next Chapter → "},"3-UserNotes/3.4-FAQsandSolutions.html":{"url":"3-UserNotes/3.4-FAQsandSolutions.html","title":"3.4 FAQs","keywords":"","body":"Common Problem In this part, some common driver-related problems, software-related problems and hardware-related problems are listed. 1 How To Ask Questions Gracefully 2 Drive Related 3 Software Problem 4 Hardware Problem If you have purchase intention or any parameter questions, please send an email to this mailbox.E-mail : \"sales@elephantrobotics.com\" If the listed problems can't help you solve and you have more after-sales questions, please send an email to this mailbox.E-mail : \"support@elephantrobotics.com\" ← Previous Section | Next Chapter → "},"4-FirstInstallAndUse/":{"url":"4-FirstInstallAndUse/","title":"4 First Install and Use","keywords":"","body":""},"4-FirstInstallAndUse/4-FirstInstallAndUse.html":{"url":"4-FirstInstallAndUse/4-FirstInstallAndUse.html","title":"4.1 Product Standard List","keywords":"","body":"First installation and use Thank you for choosing our product Before we begin, we would like to sincerely thank you for choosing our product. We are committed to providing you with an excellent user experience. First time use and problem handling This chapter will introduce in detail the initial use of the product after receiving it, and provide relevant information for solving problems to ensure that you have no worries during use. Jump to each section 4.1 Product Standard List 4.2 Product Unboxing Guide 4.3 Power-on Test Guide ← Previous Chapter | Next Chapter → "},"4-FirstInstallAndUse/4.2-ProductUnboxingGuide.html":{"url":"4-FirstInstallAndUse/4.2-ProductUnboxingGuide.html","title":"4.2 Product Unboxing Guide","keywords":"","body":"Product unboxing guide 1 Product unboxing graphic guide Why you need to follow the steps to remove the product In this section we strongly recommend following the specified steps to remove the product. Not only does this help ensure that the product is not damaged during shipping, it also minimizes the risk of unexpected failure. Please read the following graphic guide carefully to ensure that your product is safe during the unboxing process. 1 Check whether the box is damaged. If there is any damage, please contact the logistics company and the supplier in your region in time. 2 Open the box and take out the product brochure, sponge packaging cover, myCobot robotic arm, supporting power supply, emergency stop switch, flat base, and accessory package. 3 Make sure each step is completed before proceeding to the next to prevent unnecessary damage or omissions. Note: After removing the product, please carefully inspect the appearance of each item. Please check the actual items in the box against the item list. 2 Product unboxing video guide ← Previous Page | Next Page → "},"4-FirstInstallAndUse/4.3-Power-onTestGuide.html":{"url":"4-FirstInstallAndUse/4.3-Power-onTestGuide.html","title":"4.3 Power-on Test Guide","keywords":"","body":"Boot detection guide 1 Structural installation and fixation myCobot weights 3.3 kg. Due to the fact that the center of gravity will change along with the movement of the robot during utilization, robot is required to be fixed on a solid base at the beginning. A fixed base, or mobile base are both acceptable. Base Interface Size The base fixing holes act as the interface between robot and other bases or planes. The specific hole size is shown in the figure below. There are 4 countersunk holes with a diameter of 4.5 mm, which can be fixed with M6 bolts. The end is mounted with flange and is compatible with both LEGO component holes and screw threaded holes. Please make sure that there are corresponding threaded holes on the fixed base before installing. Before the installation, please confirm: The environmental condition meets the requirements listed in Section 2.2.1.3.1 above. The installation position is no smaller than the working range of the robot, and there is enough space for installation, use, maintenance and repair. Put the base in a suitable position. Installation-related tools are prepared, such as screws, wrenches, etc. After confirming the above, please move the robot to the base installation table, adjust the robot position, and align the fixing holes of the robot base with the holes on the base mounting table. After aligning the holes, align the screws with the holes and tighten them. Notice: When adjusting the position of the robot on the base installation table, do not pushing or pulling the robot directly on the base installation table to avoid scratches. When manually moving the robot, do not applying external force to the fragile parts of the robot body, so as to avoid unnecessary damage to the robot. For more installation details, scan the code to watch the video: 2 External cable connection Before operation, confirm that you have read Chapter Safety Instructions to ensure safe operation. At the same time, connect the power adapter with the robotic arm, and fix the base of the robotic arm on the table. myCobot must be powered on with an external power supply to provide sufficient power: Rated voltage: 24V Rated current: 9.4A Plug Type: R7B Note that you cannot just use the TypeC plugged into the M5Stack-basic for power. Use an officially adapted power supply to avoid damage to the robotic arm. The use case diagram is shown in the following figure: (Please carefully align it with the use case diagram for connection) Step 1: Step 2: Step 3: Step 4: Step 5: Step 6: 3 Power on status display Make sure that the power adapter and emergency stop switch are connected, press the power switch Start button (round), then the LED light panel of ATOM at the end of the robot arm will light, and the LED light panel at the bottom of the robot arm will light up. BASIC interface will display Atom communication status. 4 Basic function detection When performing this operation, please refer to section 5.1-4 Robot Information for guidance. Prior to proceeding, ensure that you have followed the electrical connection instructions mentioned above and confirm that your device is securely installed. Failure to properly connect the cables or secure the device may result in accidents. Thank you for your cooperation. ← Previous Page | Next Chapter → "},"5-BasicApplication/":{"url":"5-BasicApplication/","title":"5 Basic Application","keywords":"","body":""},"5-BasicApplication/5.1-SystemUsageInstructions/5.1-SystemUsageInstructions.html":{"url":"5-BasicApplication/5.1-SystemUsageInstructions/5.1-SystemUsageInstructions.html","title":"5.1 miniRoboflow","keywords":"","body":""},"5-BasicApplication/5.2-ApplicationUse/5.2-ApplicationUse.html":{"url":"5-BasicApplication/5.2-ApplicationUse/5.2-ApplicationUse.html","title":"5.2 Application Use","keywords":"","body":""},"5-BasicApplication/5.3-FirmwareUse/5.3-FirmwareUse.html":{"url":"5-BasicApplication/5.3-FirmwareUse/5.3-FirmwareUse.html","title":"5.3 Firmware Use","keywords":"","body":""},"6-SDKDevelopment/":{"url":"6-SDKDevelopment/","title":"6 SDK Development","keywords":"","body":""},"6-SDKDevelopment/6.1-ApplicationBasePython.html":{"url":"6-SDKDevelopment/6.1-ApplicationBasePython.html","title":"6.1 Python","keywords":"","body":""},"11-ApplicationBaseROS/11.1-ROS1/":{"url":"11-ApplicationBaseROS/11.1-ROS1/","title":"6.2 机器人操作系统 1 (ROS1) ","keywords":"","body":"ROS ROS是用于机器人的开源的元操作系统。它提供了操作系统应有的服务，包括硬件抽象、低级设备控制、常用功能的实现、进程之间的消息传递以及包管理。它也提供用于获取、编译、编写、和跨计算机运行代码所需的工具和库函数。 ROS 运行时的“graph”是一种基于ROS通信基础结构的松耦合点对点进程网络。ROS实现了几种不同的通信方式，包括基于同步RPC样式通信的服务（services）机制，基于异步流媒体数据的话题（topics）机制以及用于数据存储的参数服务器。 ROS并不是一个实时的框架，但ROS可以嵌入实时程序。Willow Garage的PR2机器人使用了一种叫做 pr2_etherCAT 的系统来实时发送或接收 ROS 消息。ROS还可以与Orocos 实时工具包无缝集成。 ROS 图标 ： 1 ros 的设计目标和特点 很多人都在问“ROS与其它机器人软件平台有什么不同？”这是一个很难解答的问题。因为ROS不是一个集成了大多数功能或特征的框架。事实上，ROS 的主要目标是为机器人研究和开发提供代码复用的支持。ROS是一个分布式的进程（也就是节点）框架，这些进程被封装在易于被分享和发布的程序包和功能包集中。ROS也支持一种类似于代码储存库的联合系统，这个系统也可以实现工程的协作及发布。这个设计可以使一个工程的开发和实现从文件系统到用户接口完全独立决策（不受ROS限制）。同时，所有的工程都可以被ROS的基础工具整合在一起。 为了支持共享和协作这一主要目标，ROS 框架还有其他几个特点： 精简：ROS尽可能设计的精简，以便为ROS编写的代码可以与其他机器人软件框架一起使用。由此得出的必然结论是ROS可以轻松集成在其它机器人软件平台：ROS已经可以与OpenRAVE，Orocos和Player集成。 ROS不敏感库：ROS的首选开发模型都是用不依赖ROS的干净的库函数编写而成。 语言独立：ROS框架可以简单地使用任何的现代编程语言实现。ros已经实现了Python版本，C++版本和 Lisp版本。同时也拥有Java 和 Lua版本的实验库。 松耦合:ROS中功能模块封装于独立的功能包或元功能包，便于分享，功能包内的模块以节点为单位运行，以ROS标准的IO作为接口，开发者不需要关注模块内部实现，只要了解接口规则就能实现复用,实现了模块间点对点的松耦合连接 方便测试：ROS内建一个了叫做rostest的单元/集成测试框架，可以轻松安装或卸载测试模块。 可扩展：ROS可以适用于大型运行时系统和大型开发进程。 免费且开源：开发者众多，功能包多 2 为什么使用ROS 通过ROS，我们能够在虚拟环境中实现对机械臂的仿真控制。 我们将通过 rviz 平台实现对机械臂的可视化，并使用多种方式对我们的机械臂进行操作； 我们将在接下来的章节中学习如何通过ros中的平台对我们产品的控制进行控制。 ← 上一节 | 下一页 → "},"11-ApplicationBaseROS/11.1-ROS1/11.1.1-EnvironmentBuilding.html":{"url":"11-ApplicationBaseROS/11.1-ROS1/11.1.1-EnvironmentBuilding.html","title":"1 环境搭建","keywords":"","body":"Linux系统环境搭建 系统出厂自带Ubuntu（V-20.04）系统，内置开发环境，无需搭建和管理，更新mercury_x1_ros包即可。 mercury_x1_ros是大象机器人推出的适用于其Mercury X1系列机械臂的ROS1包。 ROS1项目地址: http://github.com/elephantrobotics/mercury_x1_ros 机械臂API驱动库地址: https://github.com/elephantrobotics/pymycobot 1 更新 mercury_x1_ros 包 为了保证用户能及时使用最新的官方包，可以通过文件管理器进入/home/er/文件夹，打开ROS1环境终端，然后运行命令更新： # 克隆github上的代码 git clone https://github.com/elephantrobotics/mercury_x1_ros.git # 在决定是否执行此命令之前，请查看下面的注意部分 cd ~/mercury_x1_ros # 回到工作区 catkin_make # 在工作区中构建代码 source devel/setup.bash # 添加环境变量 注意: 如果在/home/er目录下已经存在mercury_x1_ros文件夹，则需要先删除原来的mercury_x1_ros，然后再执行上述命令。 其中，目录路径中的er为系统的用户名。 如有不一致，请修改。 至此ROS1环境搭建完成，您可以学习 ROS的基础知识 或者 ROS使用案例。 ← 上一页 | 下一页 → "},"11-ApplicationBaseROS/11.1-ROS1/11.1.2-ROS_Basics.html":{"url":"11-ApplicationBaseROS/11.1-ROS1/11.1.2-ROS_Basics.html","title":"2 ROS 基础","keywords":"","body":"1 ROS工程结构 1.1 catkin工作空间 Catkin工作空间是创建、修改、编译catkin软件包的目录。catkin的工作空间，直观的形容就是一个仓库，里面装载着ROS的各种项目工程，便于系统组织管理调用。 创建工作空间： mkdir -p ~/catkin_ws/src # 创建文件夹 cd ~/catkin_ws/src # 进入文件夹 catkin_init_workspace # 把当前目录初始化为一个ROS工作空间 cd .. # 返回上级目录 catkin_make # 构建工作区中的代码。 catkin的结构十分清晰，它包括了src、build、devel三个路径，在有些编译选项下也可能包括其他。但这三个文件夹是catkin编译系统默认的。它们的具体作用如下： src/: ROS的catkin软件包（源代码包） build/: catkin（CMake）的缓存信息和中间文件 devel/: 生成的目标文件（包括头文件，动态链接库，静态链接库，可执行文件等）、环境变量 一个简单的工作空间如下所示： workspace_folder/ -- WORKSPACE src/ -- SOURCE SPACE CMakeLists.txt -- 'Toplevel' CMake file, provided by catkin package_1/ CMakeLists.txt -- CMakeLists.txt file for package_1 package.xml -- Package manifest for package_1 ... package_n/ CMakeLists.txt -- CMakeLists.txt file for package_n package.xml -- Package manifest for package_n 1.2 ROS软件包 Package不仅是Linux上的软件包，也是catkin编译得基本单元，我们使用 catkin_make 编译的对象就是每 个ROS的package。 +-- PACKAGE +-- CMakeLists.txt +-- package.xml +-- src/ +-- include/ +-- scripts/ +-- msg/ +-- srv/ +-- urdf/ +-- launch/ CMakeLists.txt: 定义package的包名、依赖、源文件、目标文件等编译规则，是package不可少的成 分 package.xml: 描述package的包名、版本号、作者、依赖等信息，是package不可少的成分 src/: 存放ROS的源代码，包括C++的源码和(.cpp)以及Python的module(.py) include/: 存放C++源码对应的头文件 scripts/: 存放可执行脚本，例如shell脚本(.sh)、Python脚本(.py) msg/: 存放自定义格式的消息(.msg) srv/: 存放自定义格式的服务(.srv) urdf/: 存放机器人的模型描述(.urdf或.xacro)、3D模型文件(.sda, .stl, .dae等) launch/: 存放launch文件(.launch或.xml) 创建自己的软件包: 指令格式： catkin_create_pkg命令会要求你输入package_name，如有需要还可以在后面添加一些需要依赖的其它软件包： catkin_create_pkg [depend1] [depend2] [depend3] 例如： catkin_create_pkg beginner_tutorials std_msgs rospy roscpp 2 ROS通信架构 2.1 Master与node 1 Master 节点管理器，每个node启动前要向master注册，管理node之间的通信。 2 roscore 启动master，也会启动rosout（日志管理）和parameter server（参数管理器） 3 node ROS的进程、pkg里可执行文件运行的实例。 $rosrun [pkg_name] [node_name] #启动 $rosnode list #列出当前运行的node信息 $rosnode info [node_name] #显示某个node的详细信息 $rosnode kill [node_name] #结束某个node 4 launch 启动master和多个node。 $roslaunch [pkg_name] [file_name.launch] 2.2 Service 与 Topic 我们提供一些 service 和 topic， 用以和 mycobot 交互。 1 Service 命令行中输入: source ~/catkin_ws/devel/setup.bash # 添加环境变量 roslaunch mycobot_320_communication communication_service.launch 支持参数： port：连接串口字符串 baud：波特率 打开新的命令行： # 显示活动的服务信息 rosservice list #/get_joint_angles #/get_joint_coords #/set_joint_angles #/set_joint_coords #/switch_gripper_status #/switch_pump_status 相关的命令与说明： 命令 详细说明 rosservice list 显示活动的服务信息 rosservice info [服务名称] 显示指定服务的信息 rosservice type [服务名称] 显示服务类型 rosservice find [服务类型] 查找指定服务类型的服务 rosservice uri [服务名称] 显示ROSRPC URI服务 rosservice args [服务名称] 显示服务参数 rosservice call [服务名称] [参数] 用输入的参数请求服务 2 Topic 命令行中输入： source ~/catkin_ws/devel/setup.bash roslaunch mycobot_320_communication communication_topic.launch 支持参数： port：连接串口字符串 baud：波特率 打开新的命令行： # 显示活动的服务信息 rostopic list #/mycobot/angles_goal #/mycobot/coords_goal #/mycobot/angles_real #/mycobot/coords_real #/mycobot/pump_status #/mycobot/gripper_status 相关的命令与说明： 命令 详细说明 rostopic list 显示活动的话题目录 rostopic echo [话题名称] 实时显示指定话题的消息内容 rostopic find [类型名称] 显示使用指定类型的消息的话题 rostopic type [话题名称] 显示指定话题的消息类型 rostopic bw [话题名称] 显示指定话题的消息带宽（bandwidth） rostopic hz [话题名称] 显示指定话题的消息数据发布周期 rostopic info [话题名称] 显示指定话题的信息 rostopic pub [话题名称] [消息类型] [参数] 用指定的话题名称发布消息 service与topic的区别： service topic 同步性 异步 同步 通信模型 发布/订阅 服务器/客户端 底层协议 ROSTCP/ROSUDP ROSTCP/ROSUDP 反馈机制 无 有 缓冲区 有 无 实时性 弱 强 节点关系 多对多 一对多 适用场景 数据传输 逻辑处理 您可以前往service和topic深入了解这两项功能的使用 2.3 msg和srv简介 msg：msg文件是描述ROS消息字段的简单文本文件。它们用于为不同语言（c++或者python等）的消息生成源代码。 srv：srv文件用来描述服务。它由两部分组成：请求（request）和响应（response）。 msg文件存储在包的msg目录中，而srv文件存储在srv目录中。 1 rosmsg rosmsg是用于显示有关 ROS消息类型的 信息的命令行工具。 rosmsg 演示： rosmsg show # 显示消息描述 rosmsg info # 显示消息信息 rosmsg list # 列出所有消息 rosmsg md5 # 显示 md5 加密后的消息 rosmsg package # 显示某个功能包下的所有消息 rosmsg packages # 列出包含消息的功能包 rosmsg list 会列出当前 ROS 中的所有 msg rosmsg packages 列出包含消息的所有包 rosmsg package 列出某个包下的所有msg //rosmsg package # 包名 rosmsg package turtlesim rosmsg show 显示消息描述 //rosmsg show # 消息名称 rosmsg show turtlesim/Pose # 结果: float32 x float32 y float32 theta float32 linear_velocity float32 angular_velocity rosmsg info 作用与 rosmsg show 一样 rosmsg md5 一种校验算法，保证数据传输的一致性 2 rossrv rossrv是用于显示有关ROS服务类型的信息的命令行工具，与 rosmsg 使用语法高度雷同。 rossrv show # 显示服务消息详情 rossrv info # 显示服务消息相关信息 rossrv list # 列出所有服务信息 rossrv md5 # 显示 md5 加密后的服务消息 rossrv package # 显示某个包下所有服务消息 rossrv packages # 显示包含服务消息的所有包 rossrv list 会列出当前 ROS 中的所有 srv 消息 rossrv packages 列出包含服务消息的所有包 rossrv package 列出某个包下的所有msg //rossrv package # 包名 rossrv package turtlesim rossrv show 显示消息描述 //rossrv show # 消息名称 rossrv show turtlesim/Spawn # 结果: float32 x float32 y float32 theta string name --- string name rossrv info 作用与 rossrv show 一致 rossrv md5 对 service 数据使用 md5 校验(加密) 3 URDF介绍 Unified Robot Description Format，统一机器人描述格式，简称为URDF。ROS中的urdf功能包包含一个URDF的C++解析器，URDF文件使用XML格式描述机器人模型。 URDF 不能单独使用，需要结合 Rviz 或 Gazebo，URDF 只是一个文件，需要在 Rviz 或 Gazebo 中渲染成图形化的机器人模型。 3.1 urdf文件描述 代码示例： 本处只截取部分代码进行展示： 可以看出，urdf文件并不复杂，主要是由link和joint两个部分不断重复而成。 3.2 link部分 link元素描述具有惯性、可视特征和碰撞属性的刚体 3.2.1 属性 name： 用来描述链接本身的名称 3.2.2 元素 (可选) 连杆的惯性特性 (可选，defaults to identity if not specified) 定义相对于连杆坐标系的惯性参考系的参考坐标，该坐标必需定义在连杆重心处，其坐标轴可与惯性主轴不平行。 xyz (可选，默认为零向量) 表示 x , y , z x,y,zx,y,z 方向的偏置，单位为米。 rpy(可选: defaults to identity if not specified) 表示坐标轴在RPY方向上的旋转，单位为弧度。 连杆的质量属性 3×3旋转惯性矩阵，由六个独立的量组成：ixx, ixy, ixz, iyy, iyz, izz。 (可选) 连杆的可视化属性。用于指定连杆显示的形状（矩形、圆柱体等），同一连杆可以存在多个visual元素，连杆的形状为多个元素两个形成。一般情况下模型较为复杂可以通过soildwork绘制后生成stl调用，简单的形状如添加末端执行器等可以直接编写。同时可以在此处可根据理论模型和实际模型差距调整几何形状的位置。 (可选) 连杆几何形状的名字。 (可选，defaults to identity if not specified) 相对于连杆的坐标系的几何形状坐标系。 xyz (optional: defaults to zero vector) 表示x , y , z x,y,zx,y,z 方向的偏置，单位为米。 rpy (optional: defaults to identity if not specified) 表示坐标轴在RPY方向上的旋转，单位为弧度。 （必需） 可视化对象的形状，可以是下面的其中一种： 矩形，元素包含长、宽、高。原点在中心。 圆柱体，元素包含半径、长度。原点中心。 球体，元素包含半径。原点在中心。 网格，由文件决定，同时提供 scale ，用于界定其边界。推荐使用 Collada .dae 文件， 也支持.stl文件，但必须为一个本地文件。 (可选) 可视化组件的材料。可以在link标签外定义，但必需在robot标签内，在link标签外定义时，需引用link的名字。 (可选) 颜色，由 red/green/blue/alpha 组成，大小范围在 [0,1] 内。 (可选) 材料属性，由文件定义。 (可选) 连杆的碰撞属性。碰撞属性和连杆的可视化属性不同，简单的碰撞模型经常用来简化计算。同一个连杆可以有多个碰撞属性标签，连杆的碰撞属性表示由其定义的几何图形集构成。 (可选) 指定连杆几何形状的名称 (可选，defaults to identity if not specified) 碰撞组件的参考坐标系相对于连杆坐标系的参考坐标系。 xyz (可选， 默认零向量) 表示x , y , z x,y,zx,y,z 方向的偏置，单位为米。 rpy (可选， defaults to identity if not specified) 表示坐标轴在RPY方向上的旋转，单位为弧度。 与上述geometry元素描述相同 详细元素以及各个元素的作用可以前往官方文档进行查看 3.3 joint部分 joint部分描述了关节的运动学和动力学，并指定了关节的安全限值。 3.3.1 joint的属性： name： 指定关节的唯一名称 type： 指定关节的类型，其中类型可以是下列类型之一： revolute - 沿轴线旋转的铰链接头，其范围由上限和下限指定。 连续 - 一种连续铰链接头，围绕轴旋转，没有上限和下限。 棱柱形 - 沿轴滑动的滑动接头，其范围由上限和下限指定。 固定 - 这不是真正的关节，因为它不能移动。所有自由度都被锁定。这种类型的接头不需要轴，校准，动力学，极限或safety_controller。 浮动 - 此接头允许所有 6 个自由度的运动。 平面 - 此接头允许在垂直于轴的平面上运动。 3.3.2 joint的元素 (可选，defaults to identity if not specified) 从parent link到child link的变换，joint位于child link的原点，修改该参数可以调整连杆的位置，可用在调整实际模型与理论模型误差，但不建议大幅度修改，因为该参数影响连杆stl的位置，容易影响碰撞检测效果。 xyz (可选: 默认为零向量) 代表x , y , z x,y,zx,y,z轴方向上的偏移，单位米。 rpy (可选: 默认为零向量) 代表绕着固定轴旋转的角度：roll绕着x轴,pitch绕着y轴，yaw绕着z轴，用弧度表示。 (必需) parent link的名字是一个强制的属性。 link parent link的名字，是这个link在机器人结构树中的名字。 (必需) child link的名字是一个强制的属性。 link child link的名字，是这个link在机器人结构树中的名字。 (可选: 默认为(1,0,0)) joint的axis轴在joint的坐标系中。这是旋转轴(revolute joint)，prismatic joint移动的轴，是planar joint的标准平面。这个轴在joint坐标系中被指定。修改该参数可以调整关节的旋转所绕着的轴，常用于调整旋转方向，若模型旋向与实际相反，只需乘-1即可。固定(fixed)和浮动(floating)类型的joint不需要用到这个元素。 xyz(必需) 代表轴向量的x , y , z x,y,zx,y,z分量，为标准化的向量。 (可选) joint的参考点，用来矫正joint的绝对位置。 rising (可选) 当joint正向运动时，参考点会触发一个上升沿。 falling (可选) 当joint正向运动时，参考点会触发一个下降沿。 (可选) 该元素用来指定joint的物理性能。它的值被用来描述joint的建模性能，尤其是在仿真的时候。 (当关节为旋转或移动关节时为必需) 该元素为关节运动学约束。 lower (可选, 默认为0) 指定joint运动范围下界的属性(revolute joint的单位为弧度，prismatic joint的单位为米)，连续型的joint忽略该属性。 upper (可选, 默认为0) 指定joint运动范围上界的属性(revolute joint的单位为弧度，prismatic joint的单位为米)，连续型的joint忽略该属性。 effort (必需) 该属性指定了joint运行时的最大的力。 velocity (required) 该属性指定了joint运行时的最大的速度。 (可选) 这个标签用于指定已定义的 joint 来模仿已存在的 joint 。这个joint的值可以用以下公式计算： value = multiplier * other_joint_value + offset joint(必填) 需要模仿的joint的名字。 multiplier(可选) 指定上述公式中的乘数因子。 offset(可选) 指定上述公式中的偏移项。默认值为0 (可选) 该元素为安全控制限制，此元素下数据会读入到move_group中，但实际上时无效，move_group会跳过此处限制直接读取limit下的参数内容，同时设置该元素有几率会导致规划失败。 soft_lower_limit (可选, 默认为0) 该属性指定了joint安全控制边界的下界，是joint安全控制的起始限制点。这个值需要大于上述的limit中的lower值。 soft_upper_limit (可选, 默认为0) 该属性指定了joint安全控制边界的上界，是joint安全控制的起始限制点。这个值需要小于上述的limit中的upper值。 k_position(可选, 默认为0) 本属性用于说明位置和速度之间的关系。 k_velocity(必需) 本属性用于说明力和速度之间的关系。 详细元素以及各个元素的作用可以前往 http://wiki.ros.org/urdf/XML/joint 进行查看 4 常用命令工具 在ROS中，有许多常用的命令行工具，这些工具可以帮助你进行开发、调试、管理ROS节点等。以下是一些常用的ROS命令行工具： 4.1 编译工作空间 caktin_make 4.2 roscore 启动ROS主节点。在运行ROS节点之前，通常需要先启动roscore roscore 4.3 rosrun 运行指定的ROS节点。 rosrun package_name node_name 4.4 roslaunch 使用Launch文件启动一个或多个ROS节点。 roslaunch package_name launch_file.launch 4.5 rosnode 查看正在运行的ROS节点信息。 rosnode list rosnode info node_name 4.6 rostopic 查看正在运行的ROS话题信息。 rostopic list rostopic echo topic_name 4.7 rosservice 查看和调用ROS服务。 rosservice list rosservice call service_name 4.8 rosparam 获取和设置ROS参数。 rosparam get parameter_name rosparam set parameter_name value 4.9 rosmsg 查看ROS消息类型。 rosmsg show message_type 4.10 rosdep 安装ROS包的依赖项。 rosdep install package_name 4.11 环境变量 查看ROS_PACKAGE_PATH环境变量 echo $ROS_PACKAGE_PATH ← 上一页 | 下一页 → "},"11-ApplicationBaseROS/11.1-ROS1/11.1.3-RvizIntroduction.html":{"url":"11-ApplicationBaseROS/11.1-ROS1/11.1.3-RvizIntroduction.html","title":"3 Rviz 使用","keywords":"","body":"rviz的简单介绍及使用 rviz是ROS中一款三维可视化平台，一方面能够实现对外部信息的图形化显示，另外还可以通过 rviz 给对象发布控制信息，从而实现对机器人的监测与控制。 1 rviz界面简介 请先打开一个新的ROS1环境终端(快捷键Ctrl+Alt+T),输入如下指令： roscore 然后再打开一个ROS1环境终端(快捷键Ctrl+Alt+T)输入命令打开rviz rosrun rviz rviz # 或 rviz 打开rviz,显示如下界面： 1.1 各个区域介绍 左侧为显示器列表，显示器是在3D世界中绘制某些内容的东西，并且可能在显示列表中具有一些可用的选项。 上方是工具栏，允许用户用各种功能按键选择多种功能的工具 中间部分为3D视图: 它是可以用三维方式查看各种数据的主屏幕。3D视图的背景颜色、固定框架、网格等可以在左侧显示的全局选项（Global Options）和网格（Grid）项目中进行详细设置。 下方为时间显示区域，包括系统时间和ROS时间等。 右侧为观测视角设置区域，可以设置不同的观测视角。 本部分我们只进行粗略的介绍，如果您想了解更多详细的内容，可以前往用户指南进行查看。 如果您想了解更多rviz的相关资料信息，您可以前往官方文档进行查看 ← 上一页 | 下一页 → "},"11-ApplicationBaseROS/11.1-ROS1/11.1.4-BasicFunction.html":{"url":"11-ApplicationBaseROS/11.1-ROS1/11.1.4-BasicFunction.html","title":"4 基本功能案例","keywords":"","body":"Mercury X1的控制 这里主要介绍如何通过一系列相关指令对Mercury X1进行移动控制。 1.底盘底层通信 首先启动底盘的底层通信、地图构建程序。 打开ROS1环境终端，然后运行命令： roslaunch turn_on_mercury_robot mapping.launch 输出如下信息： ... logging to /home/er/.ros/log/34bcf3be-0606-11ef-8293-e8fb1c355a09/roslaunch-er-desktop-7394.log Checking log directory for disk usage. This may take a while. Press Ctrl-C to interrupt Done checking log file disk usage. Usage is 2.加载URDF模型 底层通信程序启动后，接着通过launch文件加载Mercury X1的URDF模型，打开一个ROS1环境终端，然后运行命令。 roslaunch turn_on_mercury_robot slider_control.launch 效果图如下： 接着你可以通过拖动滑块来控制 rviz 中的关节模型移动。 3.关节控制 URDF模型加载成功之后，如果你想让真实的 Mercury X1 跟着一起运动，需要再打开一个ROS1环境终端，然后运行命令： rosrun turn_on_mercury_robot slider_control.py 请注意：由于在命令输入的同时机械臂会移动到模型目前的位置，在您使用命令之前请确保rviz中的模型没有出现穿模现象 不要在连接机械臂后做出快速拖动滑块的行为，防止机械臂损坏 4 底盘控制 关节控制程序启动之后，如果你想让真实的Mercury X1中的底盘小车跟着一起运行，需要启动底盘小车的键盘控制程序，再打开一个ROS1环境终端，然后运行命令： rosrun turn_on_mercury_robot mercury_keyboard.py ← 上一页 | 下一节 → "},"11-ApplicationBaseROS/11.2-ROS2/":{"url":"11-ApplicationBaseROS/11.2-ROS2/","title":"6.3 机器人操作系统 2 (ROS2)","keywords":"","body":"ROS2 介绍 ROS2的前身是ROS，ROS就是机器人操作系统（Robot Operating System）。 但ROS本身并不是一个操作系统，而是一个软件库和工具集。 Ros的出现解决了机器人各个部件的通信问题。 后来，越来越多的机器人算法被集成到ROS中。 ROS2继承了ROS，比ROS更强大更好用。 1 ROS2的设计目标和特点 ROS2肩负着改变智能机器人时代的历史使命。 在设计之初，就考虑到满足各种机器人应用的需求。 多机器人系统： 未来机器人不再是独立的个体，机器人之间也需要交流和协作。 ROS2为多机器人系统的应用提供了标准的方法和通信机制。 跨平台： 机器人应用场景不同，使用的控制平台也会有很大差异。 为了让所有的机器人都能运行ROS2，ROS2可以跨平台运行在Linux、Windows、MacOS、RTOS上。 实时： 机器人运动控制和许多行为策略都要求机器人是实时的。 例如，机器人必须在 100 毫秒内可靠地检测到前方的行人，或在 1 毫秒内完成运动学和动力学计算。 ROS2 是像这样实时提供基本要求的。 产品化： 大量的机器人已经进入我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接安装在 产品并进入消费市场。 这也对ROS2的稳定性和鲁棒性提出了巨大的挑战。 项目管理： 机器人开发是一项复杂的系统工程。 设计、开发、调试、测试、部署全过程的项目管理工具和机制也将在ROS2中得到体现，方便我们开发机器人。 2 发行版本 ROS2和Ubuntu对应的发行版本和维护周期。 ROS2 版本 发布日期 维护期限 Ubuntu 版本 Dashing 2019.5 2021.5 Ubuntu 18.04 (Bionic Beaver) Eloquent 2019.11 2020.11 Ubuntu 18.04 (Bionic Beaver) Foxy 2020.6 2023.5 Ubuntu 20.04(Focal Fossa) Galactic 2021.5 2022.11 Ubuntu 20.04(Focal Fossa) Humble 2022.5 2027.5 Ubuntu 22.04(Jammy Jellyfish) 3 ROS和ROS2的比较 ROS2重新设计了系统架构。 两代ROS的架构变化如下： OS Layer： OS层。在ROS2中，它可以构建在linux或其他系统上，甚至是没有操作系统的裸机。 Middleware Layer： 中间件层。ROS1的通信系统基于TCPROS/UDPROS，而ROS2的通信系统基于DDS。 DDS是分布式实时系统中数据发布/订阅的标准解决方案。 Application Layer： 应用层。ROS1依赖于ROS Master，而在ROS2中，节点之间使用了一种名为“Discovery”的发现机制来帮助彼此建立连接。 ROS设计了一套完整的通信机制（主题、服务、参数、动作）来简化机器人开发。 通过这种机制，可以连接机器人的各个部件。 这种机制设计了一个叫做Ros Master的节点，所有其他组件的通信都必须经过master节点。 一旦主节点挂掉，就会导致整个机器人系统的通信崩溃！ 所以不能利用Ros的不稳定性来做一些自动驾驶等高风险的机器人。 此外，还有以下缺点： 基于TCP的通信实时性差，系统开销大 对 python3 支持不友好 消息机制不兼容 无加密机制，安全性低 ROS2首先移除ROS中存在的master节点。 去掉主节点后，各个节点可以通过DDS节点相互发现，各个节点是平等的，可以实现一对一、一对多、多对多的通信。 使用DDS进行通信后，可靠性和稳定性得到了增强。 与只支持Linux系统的ROS相比，ROS2还支持windows、mac甚至RTOS平台。 ← 上一节 | 下一页 → "},"11-ApplicationBaseROS/11.2-ROS2/11.2.1-EnvironmentBuilding.html":{"url":"11-ApplicationBaseROS/11.2-ROS2/11.2.1-EnvironmentBuilding.html","title":"1 环境搭建","keywords":"","body":"Linux系统环境: 系统出厂自带Ubuntu（V-20.04）系统，内置 ROS2 Galactic 开发环境，无需搭建和管理，只需更新mercury_x1_ros2包即可。 mercury_x1_ros2是大象机器人推出的适用于其Mercury X1系列机械臂的ROS2包 ROS2项目地址: http://github.com/elephantrobotics/mercury_x1_ros2 机械臂API驱动库地址: https://github.com/elephantrobotics/pymycobot 1 更新 mercury_x1_ros2 包 为了保证用户能及时使用最新的官方包，可以通过文件管理器进入/home/er文件夹，打开ROS2环境终端，然后运行命令更新： # 克隆github上的代码 git clone --depth 1 https://github.com/elephantrobotics/mercury_x1_ros2.git cd ~/mercury_x1_ros2 # 返回工作区 colcon build --symlink-install # 构建工作区中的代码，--symlink-install：避免每次调整 python 脚本时都需要重新编译 source install/setup.bash # 添加环境变量 # 单独编译功能包： # 如果只编译“turn_on_mercury_robot”，则需要执行命令： colcon build --packages-select turn_on_mercury_robot 注意: 如果在/home/er目录下已经存在mercury_x1_ros2文件夹，则需要先删除原来的mercury_x1_ros2，然后再执行上述命令。 其中，目录路径中的er为系统的用户名。 如有不一致，请修改。 至此ROS2环境搭建完成，你可以学习ROS2的基础知识 或者ROS2使用案例。 ← 上一页 | 下一页 → "},"11-ApplicationBaseROS/11.2-ROS2/11.2.2-ROS2_Basics.html":{"url":"11-ApplicationBaseROS/11.2-ROS2/11.2.2-ROS2_Basics.html","title":"2 ROS2 基础","keywords":"","body":"1 ROS2工程结构 1.1 colcon工作空间 colocn工作空间是创建、修改、编译软件包的目录。colcon的工作空间，直观的形容就是一个仓库，里面装载着ROS的各种项目工程，便于系统组织管理调用。 创建工作空间： mkdir -p ~/colcon_ws/src # 创建文件夹 cd ~/colcon_ws/ # 进入文件夹 colcon build # 构建工作区中的代码。 注意： colcon 支持选项 --symlink-install 。这允许通过更改 source 空间中的文件（例如 Python 文件或其他未编译的资源）来更改已安装的文件，以加快迭代速度。避免每次修改 python 脚本时都需要重新编译。 colcon build --symlink-install ROS2工作空间是一个具有特定结构的目录。通常有一个 src 子目录。在该子目录中是 ROS2 包的源代码所在的位置。通常，目录以其他方式为空开始。 colcon 会进行源代码构建。默认情况下，它将创建以下目录作为 src 目录的同级目录： src/: ROS2的colcon软件包（源代码包） build/: 存储中间文件的位置。对于每个包，将创建一个子文件夹，例如在其中调用 CMake。 install/: 每个包的安装位置。默认情况下，每个包都将安装到单独的子目录中。 log/: 包含有关每个 colcon 调用的各种日志记录信息。 一个ROS2工作空间目录结构如下所示： WorkSpace --- 自定义的工作空间。 |--- build：存储中间文件的目录，该目录下会为每一个功能包创建一个单独子目录。 |--- install：安装目录，该目录下会为每一个功能包创建一个单独子目录。 |--- log：日志目录，用于存储日志文件。 |--- src：用于存储功能包源码的目录。 |-- C++功能包 |-- package.xml：包信息，比如:包名、版本、作者、依赖项。 |-- CMakeLists.txt：配置编译规则，比如源文件、依赖项、目标文件。 |-- src：C++源文件目录。 |-- include：头文件目录。 |-- msg：消息接口文件目录。 |-- srv：服务接口文件目录。 |-- action：动作接口文件目录。 |-- Python功能包 |-- package.xml：包信息，比如:包名、版本、作者、依赖项。 |-- setup.py：与C++功能包的CMakeLists.txt类似。 |-- setup.cfg：功能包基本配置文件。 |-- resource：资源目录。 |-- test：存储测试相关文件。 |-- 功能包同名目录：Python源文件目录。 1.2 ROS2软件包 Package不仅是Linux上的软件包，也是colcon编译得基本单元，我们使用 colcon build 编译的对象就是每个ROS2的package。 创建自己的软件包: 使用Python创建软件包的命令语法为： ros2 pkg create --build-type ament_python 例如： ros2 pkg create --build-type ament_python --node-name my_node my_package 2 基本工具命令 在本章中，您将了解ROS2的常用命令工具。 2.1 Topics ROS 2 将复杂的系统分解为许多模块化节点。 Topics是 ROS 图的重要元素，充当节点交换消息的总线。 Topics是数据在节点之间移动的主要方式之一，因此在系统的不同部分之间移动。 具体参考: 官方教程 topics 帮助 ros2 topics -h 启动turtlesim和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 节点关系图 rqt_graph 了解topics相关命令 ros2 topics -h 话题列表 ros2 topic list ros2 topic list -t # 显示相应的消息类型 查看话题内容 ros2 topic echo ros2 topic echo /turtle1/cmd_vel 显示话题相关信息，类型 ros2 topic info # 输出 /turtle1/cmd_vel 话题接口相关信息 ros2 topic info /turtle1/cmd_vel 显示接口相关信息 ros2 interface show # 输出 geometry_msgs/msg/Twist接口相关信息 ros2 interface show geometry_msgs/msg/Twist 发布命令 ros2 topic pub '' # 发布速度命令 ros2 topic pub --once /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" # 按一定频率发布速度命令 ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 查看话题发布的频率 ros2 topic hz #输出/turtle1/cmd_vel发布频率 ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 2.2 Nodes ROS 中的每个节点都应该负责一个单一的模块用途（例如，一个节点用于控制车轮电机，一个节点用于控制激光测距仪等）。 每个节点都可以通过主题、服务、操作或参数向其他节点发送和接收数据。 一个完整的机器人系统由许多协同工作的节点组成。 在 ROS 2 中，单个可执行文件（C++ 程序、Python 程序等）可以包含一个或多个节点。 具体参考: 官方教程 nodes 帮助 ros2 nodes -h 启动turtlesim和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 查看节点列表 ros2 node list 查看节点关系图 rqt_graph 重映射 ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle ros2 node list 查看节点信息 ros2 node info ros2 node info /my_turtle 2.3 Services 服务是 ROS 图中节点的另一种通信方法。 服务基于调用和响应模型，而不是主题的发布者-订阅者模型。 虽然主题允许节点订阅数据流并获得持续更新，但服务仅在客户端专门调用时才提供数据。 具体参考: 官方教程 services 帮助 ros2 service -h 启动turtlesim和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 查看服务列表 ros2 service list # 显示服务列表及消息类型 ros2 service list -t 查看服务接收到的消息类型 ros2 service type ros2 service type /clear 找到使用某类消息类型的服务 ros2 service find ros2 service find std_srvs/srv/Empty 查看服务消息类型定义 ros2 interface show .srv ros2 interface show std_srvs/srv/Empty.srv 调用服务命令,清除行走轨迹 ros2 service call ros2 service call /clear std_srvs/srv/Empty 生成新乌龟 ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: 'turtle2'}\" 2.4 Parameters 参数是节点的配置值。 您可以将参数视为节点设置。 节点可以将参数存储为整数、浮点数、布尔值、字符串和列表。 在 ROS 2 中，每个节点都维护自己的参数。 有关参数的更多背景信息，请参阅概念文档。 具体参考: 官方教程 parameters 帮助 ros2 param -h 启动turtlesim和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 查看服务列表 ros2 param list 获取参数值 ros2 param get ros2 param get /turtlesim background_g 设置参数值 ros2 param set ros2 param set /turtlesim background_r 150 导出参数值 ros2 param dump ros2 param dump /turtlesim 独立导入参数 ros2 param load ros2 param load /turtlesim ./turtlesim.yaml 启动节点同时导入参数 ros2 run --ros-args --params-file ros2 run turtlesim turtlesim_node --ros-args --params-file ./turtlesim.yaml 2.5 Actions 动作是 ROS 2 中的一种通信类型，用于长时间运行的任务。 它们由三部分组成：目标、反馈和结果。 操作基于主题和服务。 它们的功能类似于服务，除了操作是可抢占的（您可以在执行时取消它们）。 他们还提供稳定的反馈，而不是返回单一响应的服务。 操作使用客户端-服务器模型，类似于发布者-订阅者模型（在主题教程中描述）。 “动作客户端”节点将目标发送到“动作服务器”节点，该节点确认目标并返回反馈流和结果。 具体参考: 官方教程 action 帮助 ros2 action -h 启动turtlesim和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 按G|B|V|C|D|E|R|T 实现旋转，按F键盘取消l 查看节点action的服务端和客户端 ros2 node info /turtlesim 查看动作列表 ros2 action list ros2 action list -t # 显示动作类型 查看动作信息 ros2 action info ros2 action info /turtle1/rotate_absolute 查看动作消息内容 ros2 interface show turtlesim/action/RotateAbsolute 发送动作目标信息 ros2 action send_goal ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 1.57}\" # 带反馈信息 ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: 0}\" --feedback 2.6 RQt RQt 是一个图形用户界面框架，它以插件的形式实现各种工具和界面。 可以将所有现有的 GUI 工具作为 RQt 中的可停靠窗口运行！ 这些工具仍然可以以传统的独立方式运行，但 RQt 可以更轻松地在单个屏幕布局中管理所有不同的窗口。 具体参考: 官方教程 您可以通过以下方式轻松运行任何 RQt 工具/插件： rqt rqt 帮助 rqt -h 启动turtlesim和键盘控制 ros2 run turtlesim turtlesim_node ros2 run turtlesim turtle_teleop_key 动作浏览器: / Plugins -> Actions ->Action Type Browser 参数重配置: / Plugins -> configuration ->Parameter Reconfigure 节点图: /Node Graph 控制转向: /Plugins -> Robot Tools -> Robot Steering 服务调用: /Plugins -> Services -> Service Caller 服务类型浏览器: Plugins -> Services -> Service Type Browser 消息发布: Plugins -> Topics -> Message Publisher 消息类型浏览器: Plugins -> Topics -> Message Type Browser 话题列表: Plugins -> Topics -> Topic Monitor 绘制曲线图: Plugins -> Visualization -> Plot 查看日志: rqt_console ros2 run rqt_console rqt_console ros2 run turtlesim turtlesim_node ros2 topic pub -r 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}\" 2.7 TF2 tf2 是变换库，它允许用户随着时间的推移跟踪多个坐标系。 tf2 以时间缓冲的树结构维护坐标系之间的关系，并让用户在任何需要的时间点在任意两个坐标系之间变换点、向量等。 具体参考: 官方教程 让我们从安装演示包及其依赖项开始。 sudo apt-get install ros-foxy-turtle-tf2-py ros-foxy-tf2-tools ros-foxy-tf-transformations 跟随 launch启动2个小乌龟，第一个小乌龟自动跟随第二个 ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py 通过键盘控制第一个小乌龟移动 ros2 run turtlesim turtle_teleop_key 查看TF树 ros2 run tf2_tools view_frames.py evince frames.pdf 查看两个坐标系之间的关系 ros2 run tf2_ros tf2_echo [reference_frame] [target_frame] ros2 run tf2_ros tf2_echo turtle2 turtle1 在rviz上查看TF关系 ros2 run rviz2 rviz2 -d $(ros2 pkg prefix --share turtle_tf2_py)/rviz/turtle_rviz.rviz 2.8 URDF URDF 是统一机器人描述格式，用于指定 ROS 中的机器人几何和组织。 具体参考: 官方教程 完整语法 # describe: # Parameters: name=\"\" # Child node: # Description: # Parameters：name=\"\" # Child node: # describe: # Parameters: # child nodes: # description # parameters # Child node: # Description: # Parameters: # length=\"0.6\" # radius=\"0.2\" # description # Parameters:size=\"0.6 0.1 0.2\" # Description #Parameters: filename=\"package://urdf_tutorial/meshes/l_finger_tip.dae\" # Description: collision element, prioritized # parameters # child node # description # parameters # Child nodes: # description: mass # Parameters: value=10 # Description: Inertia # Parameters: i+\"Cartesian product of xyz\" (9 in total)=\"0.4\" # Description: # Parameters: # rpy=\"0 1.5 0\" # xyz=\"0 0 -0.3\" # Description # Parameters：name=\"blue\" # Description # Parameters： # name=\"\" # type=\"\" # fixed # prismatic # child node # Description # Parameters：link=\"\" # Description： # Parameters：link=\"\" # Description： # Parameters：xyz=\"0 -0.2 0.25\" # Description # Parameters： # effort=\"1000.0\" maximum effort # lower=\"-0.38\" Joint upper limit (radians) # upper=\"0\" Joint lower limit (radians) # velocity=\"0.5\" Maximum velocity # Description： Press ? axis rotation # Parameters：xyz=\"0 0 1\"，along the Z axis # Description： # Parameters：name=\"blue\" # child node： # description： # Parameters：rgba=\"0 0 0.8 1\" 安装依赖库 sudo apt install ros-foxy-joint-state-publisher-gui ros-foxy-joint-state-publisher sudo apt install ros-foxy-xacro 下载源代码 cd ~/dev_ws git clone -b ros2 https://github.com/ros/urdf_tutorial.git src/urdf_tutorial 编译源代码 colcon build --packages-select urdf_tutorial 运行示例 ros2 launch urdf_tutorial display.launch.py model:=urdf/01-myfirst.urdf 2.9 Launch ROS 2 中的启动系统负责帮助用户描述他们系统的配置，然后按照描述执行。 系统的配置包括要运行的程序、运行它们的位置、传递给它们的参数，以及 ROS 特定的约定，这些约定通过为每个组件提供不同的配置，使得在整个系统中重用组件变得容易。 它还负责监视已启动流程的状态，并报告和/或响应这些流程状态的变化。 用 Python、XML 或 YAML 编写的launch文件可以启动和停止不同的节点，以及触发和处理各种事件。 具体参考: 官方教程 Setup 创建一个新目录来存储您的launch文件： mkdir launch 编写启动文件 让我们使用 turtlesim 包及其可执行文件将 ROS 2 启动文件放在一起。 正如刚才提到的。 将完整代码复制并粘贴到 launch/turtlesim_mimic_launch.py 文件中： from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description(): return LaunchDescription([ Node( package='turtlesim', namespace='turtlesim1', executable='turtlesim_node', name='sim' ), Node( package='turtlesim', namespace='turtlesim2', executable='turtlesim_node', name='sim' ), Node( package='turtlesim', executable='mimic', name='mimic', remappings=[ ('/input/pose', '/turtlesim1/turtle1/pose'), ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel'), ] ) ]) 运行ros2启动文件 要运行上面创建的launch文件，请进入您之前创建的目录并运行以下命令： 语法格式为： ros2 launch cd launch ros2 launch turtlesim_mimic_launch.py launch 帮助 ros2 launch -h 运行节点 ros2 launch turtlesim multisim.launch.py 查看launch文件有哪些参数 ros2 launch turtlebot3_fake_node turtlebot3_fake_node.launch.py -s ros2 launch turtlebot3_fake_node turtlebot3_fake_node.launch.py --show-arguments ros2 launch turtlebot3_bringup robot.launch.launch.py -s 运行launch文件带参数 ros2 launch turtlebot3_bringup robot.launch.launch.py usb_port:=/dev/opencr 运行节点并调试 ros2 launch turtlesim turtlesim_node.launch.py -d 只输出节点描述 ros2 launch turtlesim turtlesim_node.launch.py -p 运行组件 ros2 launch composition composition_demo.launch.py 2.10 Run run用于运行单个节点，组件程序。 run 帮助 ros2 run -h 运行节点 ros2 run turtlesim turtlesim_node 运行节点带参数 ros2 run turtlesim turtlesim_node --ros-args -r __node:=turtle2 -r __ns:=/ns2 运行组件容器 ros2 run rclcpp_components component_container 运行组件 ros2 run composition manual_composition 2.11 Package 一个包可以被认为是你的 ROS 2 代码的容器。 如果您希望能够安装您的代码或与他人共享，那么您需要将其组织在一个包中。 借助软件包，您可以发布您的 ROS 2 作品并允许其他人轻松构建和使用它。 ROS 2 中的包创建使用 ament 作为其构建系统，并使用 colcon 作为其构建工具。 您可以使用官方支持的 CMake 或 Python 创建包，但确实存在其他构建类型。 具体参数: 官方教程 创建工作空间 为每个新工作区创建一个新目录。 名称并不重要，但它有助于表明工作区的用途。 让我们为“开发工作区”选择目录名称 ros2_ws： mkdir -p ~/ros2_ws/src cd ~/ros2_ws/src pkg 帮助 ros2 pkg -h 列出功能包 ros2 pkg executable turtlesim 输出某个功能包可执行程序 ros2 pkg executable turtlesim 创建Python功能包 在运行包创建命令之前，请确保您位于 src 文件夹中。 cd ~/ros2_ws/src 在 ROS 2 中创建新包的命令语法是： ros2 pkg create --build-type ament_python # 您将使用可选参数 --node-name 在包中创建一个简单的 Hello World 类型可执行文件。 ros2 pkg create --build-type ament_python --node-name my_node my_package 构建package 将包放在工作区中特别有价值，因为您可以通过在工作区根目录中运行 colcon build 来一次构建许多包。 否则，您将不得不单独构建每个包。 # 返回到工作区目录： cd ~/ros2_ws # 现在你可以构建你的包： colcon build Source setup文件 要使用您的新包和可执行文件，首先打开一个新终端并获取您的主要 ROS 2 安装源。 然后，从 ros2_ws 目录中，运行以下命令来获取您的工作空间： source install/setup.bash 现在您的工作区已添加到您的路径中，您将能够使用新包的可执行文件。 使用 package 要运行您在包创建期间使用 --node-name 参数创建的可执行文件，请输入以下命令： ros2 run my_package my_node ← 上一页 | 下一页 → "},"11-ApplicationBaseROS/11.2-ROS2/11.2.3-Rviz2Introduction.html":{"url":"11-ApplicationBaseROS/11.2-ROS2/11.2.3-Rviz2Introduction.html","title":"3 Rviz2 使用","keywords":"","body":"rviz2的简单介绍及使用 Rviz2是一个可视化工具，用于显示机器人环境中的消息，提供3D视角来查看机器人的状态和活动。它可以帮助开发者更好地理解机器人当前的状态和活动，以及其他可视化消息。Rviz2提供了一系列的可视化工具，可以帮助开发者更好地理解机器人的状态和活动，比如可视化坐标系、激光扫描消息、点云消息、机器人模型等等。使用Rviz2，可以轻松地查看和调试机器人系统，从而更好地实现机器人目标。 1 rviz2的界面简介 打开ROS2环境终端，输入命令打开rviz2： ros2 run rviz2 rviz2 # 或 rviz2 打开rviz2,显示如下界面： 1.1 各个区域介绍 左侧为显示器列表，显示器是在3D世界中绘制某些内容的东西，并且可能在显示列表中具有一些可用的选项。包括添加、删除、复制、重命名插件，显示插件，以及设置插件属性等功能。 上方是工具栏，允许用户用各种功能按键选择多种功能的工具 中间部分为3D视图: 它是可以用三维方式查看各种数据的主屏幕。3D视图的背景颜色、固定框架、网格等可以在左侧显示的全局选项（Global Options）和网格（Grid）项目中进行详细设置。 下方为时间显示区域，包括系统时间和ROS时间等。 右侧为观测视角设置区域，可以设置不同的观测视角。 本部分我们只进行粗略的介绍，如果您想了解更多详细的内容，可以前往用户指南进行查看。 如果您想了解更多rviz的相关资料信息，您可以前往官方文档进行查看 ← 上一页 | 下一页 → "},"11-ApplicationBaseROS/11.2-ROS2/11.2.4-BasicFunction.html":{"url":"11-ApplicationBaseROS/11.2-ROS2/11.2.4-BasicFunction.html","title":"4 基本功能案例","keywords":"","body":"Mercury X1的控制 这里主要介绍如何通过一系列相关指令对Mercury X1进行移动控制。 1.底盘底层通信 首先启动底盘的底层通信、地图构建程序，并加载Mercury X1的URDF模型。 打开ROS2环境终端，然后运行命令： ros2 launch slam_gmapping slam_gmapping.launch.py 接着你可以通过拖动滑块来控制 rviz2 中的关节模型移动。 2.关节控制 URDF模型加载成功之后，如果你想让真实的 Mercury X1 双臂跟着一起运动，需要再打开一个ROS2环境终端，然后运行命令： ros2 run mercury_x1_control slider_control 请注意：由于在命令输入的同时机械臂会移动到模型目前的位置，在您使用命令之前请确保rviz中的模型没有出现穿模现象 不要在连接机械臂后做出快速拖动滑块的行为，防止机械臂损坏 3 底盘控制 关节控制程序启动之后，如果你想让真实的Mercury X1中的底盘小车跟着一起运动，需要启动底盘小车的键盘控制程序，再打开一个ROS2环境终端，然后运行命令： ros2 run mercury_x1_control mercury_keyboard ← 上一页 | 下一节 → "},"6-SDKDevelopment/6.4-ApplicationBaseCPlus.html":{"url":"6-SDKDevelopment/6.4-ApplicationBaseCPlus.html","title":"6.4 C plus plus (C++)","keywords":"","body":""},"6-SDKDevelopment/6.5-ApplicationBaseJS.html":{"url":"6-SDKDevelopment/6.5-ApplicationBaseJS.html","title":"6.5 Javascript","keywords":"","body":""},"6-SDKDevelopment/6.7-ApplicationBaseAPP.html":{"url":"6-SDKDevelopment/6.7-ApplicationBaseAPP.html","title":"6.7 Develop and use based on APP","keywords":"","body":""},"7-ExamplesRobotsUsing/7-ExamplesRobotsUsing.html":{"url":"7-ExamplesRobotsUsing/7-ExamplesRobotsUsing.html","title":"7 Examples of Robots Using","keywords":"","body":"7 机械臂使用场景案例 本章节呈现了经典的机械臂使用案例，以展示产品在富有代表性的场景中的应用。这包括了机械臂在不同领域的典型应用，突显了产品的多功能性和适用性。通过这些案例，用户可以深入了解机械臂在实际应用中的灵活性和效能，为他们在特定场景中的应用提供参考。 1、画画案例： from pymycobot.mycobot import MyCobot import time import math # 创建 MyCobot 实例，指定串口和波特率 mc = MyCobot('COM3',115200) # 发送目标坐标点，使机械臂移动到指定位置 mc.send_coords([52.9, -64.4, 409.7, -91.23, -0.25, -89.81], 50, 0) # 暂停 2 秒 time.sleep(2) # 发送目标坐标点，使机械臂移动到另一个指定位置 mc.send_coords([21.5, 145.5, 233.6, -89.72, 19.19, 13.45], 50, 0) # 暂停 2 秒 time.sleep(2) # 循环发送目标坐标点，使机械臂按圆形轨迹运动 for i in range(1, 361): x = 21.5 + 30 * math.cos(i / 180.0 * math.pi) y = 145.5 + 30 * math.sin(i / 180.0 * math.pi) mc.send_coords([x, y, 233.6, -89.72, 19.19, 13.45], 100, 0) # 暂停 0.7 秒 time.sleep(0.7) # 发送目标坐标点，使机械臂回到初始位置 mc.send_coords([52.9, -64.4, 409.7, -91.23, -0.25, -89.81], 50, 0) ‵‵‵ **2、跳舞案例:** ```python from pymycobot.mycobot import MyCobot import time if __name__ == '__main__': # 创建 MyCobot 实例，指定串口和波特率 mc = MyCobot('COM3',115200) # 设置开始开始时间 start = time.time() # 让机械臂到达指定位置 mc.send_angles([-1.49, 115, -153.45, 30, -33.42, 137.9], 80) # 判断其是否到达指定位置 while not mc.is_in_position([-1.49, 115, -153.45, 30, -33.42, 137.9], 0): # 让机械臂恢复运动 mc.resume() # 让机械臂移动0.5s time.sleep(0.5) # 暂停机械臂移动 mc.pause() # 判断移动是否超时 if time.time() - start > 3: break # 设置开始时间 start = time.time() # 让运动持续30秒 while time.time() - start 3、木块搬运案例： from pymycobot import PI_PORT, PI_BAUD import time def gripper_test(mc): print(\"Start check IO part of api\\n\") # 检测夹爪是否正在移动 flag = mc.is_gripper_moving() print(\"Is gripper moving: {}\".format(flag)) time.sleep(1) # Set the current position to (2048). # Use it when you are sure you need it. # Gripper has been initialized for a long time. Generally, there # is no need to change the method. # mc.set_gripper_ini() # 设置关节点1，让其转动到2048这个位置 mc.set_encoder(1, 2048) time.sleep(2) # 设置六个关节位，让机械臂以20的速度转动到该位置 mc.set_encoders([1024, 1024, 1024, 1024, 1024, 1024], 20) # mc.set_encoders([2048, 2900, 2048, 2048, 2048, 2048], 20) # mc.set_encoders([2048, 3000,3000, 3000, 2048, 2048], 50) time.sleep(3) # 获取关节点1的位置信息 print(mc.get_encoder(1)) # 设置夹爪转动到2048这个位置 mc.set_encoder(7, 2048) time.sleep(3) # 设置夹爪让其转到1300这个位置 mc.set_encoder(7, 1300) time.sleep(3) # 以70的速度让夹爪到达2048状态，2048会报错，故改成255 mc.set_gripper_value(255, 70) time.sleep(3) # 以70的速度让夹爪到达1500状态，1500会报错，故改成255 mc.set_gripper_value(255, 70) time.sleep(3) num=5 while num>0: # 设置夹爪的状态，让其以70的速度快速打开爪子 mc.set_gripper_state(0, 70) time.sleep(3) # 设置夹爪的状态，让其以70的速度快速收拢爪子 mc.set_gripper_state(1, 70) time.sleep(3) num-=1 # 获取夹爪的值 print(\"\") print(mc.get_gripper_value()) # mc.release_all_servos() if __name__ == \"__main__\": # 创建 MyCobot 实例，指定串口和波特率 mc = MyCobot('COM3',115200) mc.set_encoders([2048, 2048, 2048, 2048, 2048, 2048], 20) time.sleep(3) gripper_test(mc) "},"8-FilesDownload/":{"url":"8-FilesDownload/","title":"8 Documents Download","keywords":"","body":""},"8-FilesDownload/8.1-Productinformation.html":{"url":"8-FilesDownload/8.1-Productinformation.html","title":"8.1 Product information","keywords":"","body":""},"8-FilesDownload/8.2-ProductDrawings.html":{"url":"8-FilesDownload/8.2-ProductDrawings.html","title":"8.2 Product Brochure","keywords":"","body":""},"8-FilesDownload/8.3-SoftwareDocumentation.html":{"url":"8-FilesDownload/8.3-SoftwareDocumentation.html","title":"8.3 Software and Source Code","keywords":"","body":""},"8-FilesDownload/8.4-Systeminformation.html":{"url":"8-FilesDownload/8.4-Systeminformation.html","title":"8.4 System Information","keywords":"","body":""},"8-FilesDownload/8.5-Propaganda.html":{"url":"8-FilesDownload/8.5-Propaganda.html","title":"8.5 Publicity Material","keywords":"","body":""},"9-AboutUs/":{"url":"9-AboutUs/","title":"9 About Us","keywords":"","body":""},"9-AboutUs/9.1-company.html":{"url":"9-AboutUs/9.1-company.html","title":"9.1 Elephant Robotics","keywords":"","body":"大象机器人 1 公司简介 大象机器人(Elephant Robotics)立足于中国·深圳，是一家专注于机器人研发设计及自动化解决方案的高新科技企业。 我们致力于为机器人教育及科研机构、商业场景、工业生产提供高柔性的协作机器人、简单易学的操作系统以及智能的自动化解决方案。其产品质量及智慧方案备受韩国、日本、美国、德国、意大利、希腊等数家来自世界500强名企工厂的一致认可与好评。 大象机器人秉持“Enjoy Robots World”的愿景，倡导人与机器人的协同工作，让机器人成为人类工作生活的好帮手，帮助人们从简单、重复、枯燥的工作中解放出来，充分发挥人机协同优势，进而提高工作效率，帮助人类缔造美好新生活。 未来，大象机器人希望通过新一代尖端科技推动机器人产业发展，携手与客户伙伴们共同开启自动化智能化新时代。 2 发展历程 2016.08 -----大象机器人有限公司正式成立 2016.08 -----进入 HAX 孵化器，获得 SOSV 种子轮投资 2016.08 ----- 开始研发 Elephant S 工业协作机器人 2017.01 -----获评 “CES 中国最具创新企业 Top10” 2017.04 -----出席汉诺威工业博览会及韩国自动化展览会 2017.07 -----两位创始人入选福布斯亚洲评选的“30 位 30 岁以下商业精英” 2017.10 -----第五代单臂工业协作机器人 Elephant S 问世 2018.04 -----获得”云天使基金”天使轮投资 2018.06 -----首次公开亮相 2018 年汉诺威世界工业博览会 2018.06 -----获得长江商学院“智造创业 MBA 奖” 2018.06 -----获得清华经管“创业加速器 X-elerator 奖” 2018.11 -----获得亚洲智能硬件大赛深圳赛区第二名 2018.11 -----获得高工金球奖“最具投资企业奖” 2019.03 -----获得高工金球奖“领军人物奖” 2019.04 -----2019年3月 Catbot获“工业机器人创新奖” 2019.09 -----出席华为欧洲生态大会(HCE)，正式成为华为生态伙伴一员 2019.11 -----大象机器人携手哈工大出席IROS国际智能机器人与系统大会 2019.12 -----大象机器人-华南理工大学“智能机器人联合开发实验室”正式揭牌 2019.12 -----荣获高工2019年度“创新技术奖” 2019.12 -----荣获高工2019年度“十大快速成长企业” 2019.12 -----荣获深圳装备工业-工业机器人细分领域-“新锐企业奖” 2019.12 -----世界首款仿生机器猫MarsCat问世 2020.05 -----创始人获得2019年度深圳市机器人新锐人物奖 2020.10 -----全球最轻最小的六轴协作机器人myCobot问世 2021.03 -----面向科研的最小协作机器人myCobotPro 320问世 2021.05 -----火星仿生猫MarsCat获得新华财经、中国日报、南京日报、哈尔滨日报等多家媒体的竞相报道 2021.07 -----发布最小的复合机器人底盘 – 小象移动机器人myAGV 2021.09 -----全球首款全包裹式的四轴机械臂-小象码垛机械臂myPalletizer问世 2022.01 -----获36氯、极客公园关于大象机器人在轻是化消费级机器人行业系列报道 2022.02 -----MarsCat、myCobot 亮相春晚夫视频直播，参与深圳卫视过年特备节目 2022.05 -----最紧凑的小六轴机械臂mechArm 问世，能人工智能机器人教育 2022.06 -----联合Unity引擎，基于myCobot 机器人，推出人工智能机器人实践入门书+籍(国际课程) 2022.07 -----发布人工智能时代的仿真陪伴机器猫米塔猫metaCat 2022.07 -----发布史上最小双臂协作机器人mybuddy 2022.08 -----获得“十大非工业技术创新奖” 2022.08 -----创始人获“2022深圳市机器人新锐人物奖” 2022.11 -----科大讯飞AI开发者大赛real time enganement（实时互动）赛道亚军 2022.11 -----2022世界声博会1024科博展最佳机器人奖 2022.12 -----央视报道 3 相关链接 官网：https://www.elephantrobotics.com 购买链接 淘宝：https://shop504055678.taobao.com shopify：https://shop.elephantrobotics.com/ 视频 bilibili：大象机器人的个人空间-大象机器人个人主页-哔哩哔哩视频 youtube：Elephant Robotics - YouTube Facebook : https://www.facebook.com/mycobotcreator/ Linkedin : https://www.linkedin.com/company/18319865 X (Twitter) : https://twitter.com/CobotMy Discord : https://discord.gg/2MAherp7nt Hackster : https://www.hackster.io/elephant-robotics ← Previous Page| Next Page → "},"9-AboutUs/9.2-contact.html":{"url":"9-AboutUs/9.2-contact.html","title":"9.2 Contact us","keywords":"","body":"Contact Us Our working hours are on Chinese working days, from 10 AM to 6 PM Beijing time. If you have any other problems, contact us via the ways below.Email : If you have purchase intention or any parameter questions, please send an email to this mailbox.E-mail : sales@elephantrobotics.com If the listed problems can't help you solve and you have more after-sales questions, please send an email to this mailbox.E-mail : support@elephantrobotics.com We will give a reply within 1-2 business days; WeChat: We provide one-to-one service only for those users who have purchasedmyCobot via WeChat. ← Previous Page "}}